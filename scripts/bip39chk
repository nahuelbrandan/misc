#!/usr/bin/env python3
#
# Validate / fix BIP39 seed words and dump derived info.
#
# Adjusts last word when checksum is wrong. Allows creating a seed with dice/coins
# offline and then using the xpub online for a watch-only wallet without exposing 
# the xprv. Or just paste the valid seed into Electrum.
#
# This program requires that Electrum 3.0 or greater is installed on the system.
#
# Much of this code has been derived from the Electrum 3.0 keystore module.
# I wanted to make it more independent but there's too much well tested code 
# already written. Not only is it easier but it's a lot safer than starting 
# from scratch.
#
# Electrum is distributed under the MIT license included below as required.
#
# Portions Copyright (C) 2016  The Electrum developers
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os, sys, hashlib, binascii, json
from unicodedata import normalize

from electrum.mnemonic import load_wordlist

if len(sys.argv) < 2:
    print( "\nValidate / fix BIP39 seed words and dump related info." )
    print( "Requires Electrum 3.0 or greater installed on system." )
    print( "\nUsage: %s [-s][-j][-p passphrase][-w wordlist][-a count][-s start][-c change][-e count] <seed words>" % sys.argv[0] )
    print( "-s\tSegWit wallet\n-j\tJSON format output\n-p\tBIP39 passphrase (extra words)\n-w\tWordlist filename (default english.txt)" )
    print( "-a\tNumber of addresses to generate, default none\n-i\tAddress start index, default 0\n-c\tOutput \"change\" addresses" )
    print( "-k\tInclude pubkey or script hash" )
    print( "-e\tUse input data as entropy to create word list of given word count.\n-x\tInput is xpub/ypub, only output addresses" )
    print( "Seed words can be in quotes or not, but must follow options. Use -- to read from stdin." )
    sys.exit(1)

passphrase = ''
derivation = "m/44'/0'/0'"
wordlist = 'english.txt'
addrcfg = { 'cnt':0, 'start':0, 'chg':0 }
wordcount = 0
js,addr_only,pkh = False,False,False

seedargs = 1
seed_data = None
while(seedargs < len(sys.argv)):
    if sys.argv[seedargs][0] != '-':
        break
    n = 1
    while n < len(sys.argv[seedargs]):
        opt = sys.argv[seedargs][n]
        if opt == 's':
            derivation = "m/49'/0'/0'" 
        elif opt == 'j':
            js = True 
        elif opt == 'k':
            pkh = True 
        elif opt == 'c':
            addrcfg['chg'] = 1
        elif opt == 'x':
            addr_only = True
        else:
            if opt == 'p':
                passphrase = sys.argv[seedargs+1]
            elif opt == 'w':
                wordlist = sys.argv[seedargs+1]
            elif opt == 'a':
                addrcfg['cnt'] = int(sys.argv[seedargs+1])
            elif opt == 'i':
                addrcfg['start'] = int(sys.argv[seedargs+1])
            elif opt == 'e':
                wordcount = int(sys.argv[seedargs+1])
            elif opt == '-':
                seed_data = sys.stdin.readline().replace('\n', '').split()
            else:
                print("Unrecognized option:", opt)
                break
            seedargs += 1
            break
        n += 1
    seedargs += 1

    
if seed_data == None:
    if seedargs == len(sys.argv):
        print("No input data. Missing words or -- for stdin.")
        sys.exit(2)
    seed_data = ' '.join(sys.argv[seedargs:]).split()

def bip39_to_seed(mnemonic, passphrase):
    import pbkdf2, hmac
    PBKDF2_ROUNDS = 2048
    mnemonic = normalize('NFKD', ' '.join(mnemonic.split()))
    passphrase = normalize('NFKD', passphrase or '')
    return pbkdf2.PBKDF2(mnemonic, 'mnemonic' + passphrase, iterations = PBKDF2_ROUNDS, macmodule = hmac, digestmodule = hashlib.sha512).read(64)
    
def hex_to_bip39(hexdata, wordlist, wordcount):
    wordlist = load_wordlist(wordlist)
    n = len(wordlist)
    i = int(hexdata, 16)
    words = []
    while i > 0:
        i,k = divmod(i, n)
        words.append(wordlist[k])
    return words[:wordcount]

def bip39_validate(mnemonic, wordlist):
    words = [ normalize('NFKD', word) for word in mnemonic.split() ]
    words_len = len(words)
    wordlist = load_wordlist(wordlist)
    n = len(wordlist)
    checksum_length = 11*words_len//33
    entropy_length = 32*checksum_length
    i = 0
    words.reverse()
    while words:
        w = words.pop()
        try:
            k = wordlist.index(w)
        except ValueError:
            print("Word list not valid")
            sys.exit(1)
        i = i*n + k
    if words_len not in [12, 15, 18, 21, 24]:
        return False, None
    entropy = i >> checksum_length
    checksum = i % 2**checksum_length
    h = '{:x}'.format(entropy)
    while len(h) < entropy_length/4:
        h = '0'+h
    b = bytearray.fromhex(h)
    hashed = int(binascii.hexlify(hashlib.sha256(b).digest()), 16)
    calculated_checksum = hashed >> (256 - checksum_length)
    return wordlist[k-checksum+calculated_checksum] if checksum != calculated_checksum else w

if addr_only:
    out = { 'pub': seed_data[0] }
    if not out['pub'][0] in 'xy':
        print("Invalid pub key input. Should be xpub or ypub.")
        sys.exit(3)
    out['type'] = 'p2pkh' if out['pub'][0] == 'x' else 'p2wpkh-p2sh'
    addrcfg['cnt'] = addrcfg['cnt'] or 5
    
else:
    if wordcount in [12,15,18,21,24]:
        seed_data = hex_to_bip39(binascii.hexlify(hashlib.sha512(seed_data[0].encode()).digest()), wordlist, wordcount)

    last_word = bip39_validate(' '.join(seed_data), wordlist)
    if seed_data[-1] != last_word:
        seed_data[-1] = last_word

    out = { 'seed': ' '.join(seed_data) }
    out['derivation'] = derivation

    bip32_seed = bip39_to_seed(out['seed'], passphrase)
    out['seedhex'] = str(binascii.hexlify(bip32_seed), 'ascii') 
    xtype = 'p2wpkh-p2sh' if derivation.startswith("m/49'") else 'standard'
    out['type'] = 'p2pkh' if xtype == 'standard' else xtype

    #from electrum.bitcoin import bip32_root, bip32_private_derivation
    #prv,pub = bip32_root(bip32_seed, xtype)
    #out['prv'],out['pub'] = bip32_private_derivation(prv, "m/", derivation)

if addrcfg['cnt'] > 0:
    from electrum.bitcoin import bip32_public_derivation, pubkey_to_address, deserialize_xpub, CKD_pub
    from electrum.bitcoin import hash_160, p2wpkh_nested_script, bfh
    out['addr'] = {}
    out['hash'] = {}
    out['addrtype'] = 'change' if addrcfg['chg'] == 1 else 'receiving'
    xpubaddr = bip32_public_derivation(out['pub'], "", "/%d" % addrcfg['chg'])
    for i in range(addrcfg['start'], addrcfg['start']+addrcfg['cnt']):
        _, _, _, _, c, cK = deserialize_xpub(xpubaddr)
        cK, c = CKD_pub(cK, c, i)
        out['addr'][i] = pubkey_to_address(out['type'], binascii.hexlify(cK).decode('ascii'))
        if pkh:
            if xtype == 'standard':
                out['hash'][i] = binascii.hexlify(hash_160(bfh(binascii.hexlify(cK).decode('ascii')))).decode('ascii')
            else:
                out['hash'][i] = binascii.hexlify(hash_160(bfh(p2wpkh_nested_script(binascii.hexlify(cK).decode('ascii'))))).decode('ascii')
    
if js:
    print(json.dumps(out, indent=2, sort_keys=True))
else:
    if not addr_only:
        print()
        for k in ['seed','seedhex','type']:#,'prv','pub']:
            print(k+': '+out[k])
    if 'addr' in out:
        print()
        h = 'pkh' if xtype == 'standard' else 'sh' 
        print( "addrtype", out['addrtype'] )
        for k,v in out['addr'].items():
            print("addr[%s]: %s" % (k,v))
        for k,v in out['hash'].items():
            print("%s[%s]: %s" % (h,k,v))
    print()
