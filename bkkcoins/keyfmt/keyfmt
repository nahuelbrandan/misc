#!/usr/bin/env python
#
# Read a private key from stdin and output formatted data values.
# Input one key per line either hex (64 chars) or WIF (base58 chars),
# or BIP38 format.
#
# Usage: keyfmt [-c] <format> [bip38pwd]
#
# optional: -c indicates to output compressed keys/addrs
#
# The format argument can contains these variables:
#
# %h = hex privkey
# %w = WIF privkey
# %e = BIP38 encrypted privkey
# %p = hex public key
# %k = pubkey hash
# %a = address
#
# eg. "Address: %a\nPrivkey: %w" outputs a format like the vanitygen program
#     "a:%w" outputs a format good for importing to Electrum
# 
# This generates a new key for importing to Electrum:
#
#     hexdump -v -e '/1 "%02X"' -n 32 /dev/urandom | keyfmt "%a:%w"
#
# This generates a new BIP38 encrypted key and address:
#
#     hexdump -v -e '/1 "%02X"' -n 32 /dev/urandom | keyfmt "%e\n%a" test123
#
# BIP38 code adapted from https://github.com/bpdavenport/btc
#

import sys, binascii, hashlib, string

if len(sys.argv) < 2:
    print "Usage: %s [-c] <format string> [BIP38 password]\n\nRead a private key from stdin and output formatted data." % sys.argv[0]
    print "Hex, WIF and BIP38 private keys are supported.\n"
    print "optional -c indicates to output compressed key/addrs\n"
    print "These format tokens are supported:\n%h = HEX privkey\n%w = WIF privkey\n%e = BIP38 encrypted key\n%p = public key\n%a = address\n" 
    print "eg. hexdump -v -e '/1 \"%02X\"' -n 32 /dev/urandom | keyfmt \"%a:%w\"\ngenerates a random key suitable for Electrum import\n"
    sys.exit(1)

alphabet="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"

def b58encode(num, pad=''):
    out = ''
    while num >= 58:
        num,m = divmod(num, 58)
        out = alphabet[m] + out
    return pad + alphabet[num] + out

def b58hex(s58):
    num = 0L
    for (i, c) in enumerate(s58[::-1]):
        num += alphabet.find(c) * (58**i)      
    return hex(num)[2:-1].upper()
    
def priv2pub(priv, compress=False):
    verkey = ecdsa.SigningKey.from_secret_exponent(long(priv, 16), curve=SECP256k1 ).get_verifying_key()
    prefix = '\04' if not compress else ( '\03' if verkey.pubkey.point.y() % 2 == 1 else '\02' )
    return prefix + ( binascii.unhexlify('%064x' % verkey.pubkey.point.x()) if compress else verkey.to_string() )

def mkpkh(pubkey):
    rmd = hashlib.new('ripemd160')
    rmd.update(hashlib.sha256(pubkey).digest())
    return rmd.digest()
        
def mkaddr(pubkey):
    pad = ""
    rmd = hashlib.new('ripemd160')
    rmd.update(hashlib.sha256(pubkey).digest())
    an = chr(0) + rmd.digest()
    for c in an:
        if c == '\0': pad += '1'
        else: break
    return b58encode(long(binascii.hexlify(an + hashlib.sha256(hashlib.sha256(an).digest()).digest()[0:4]), 16), pad)

def bip38_encrypt(privkey, addr, passphrase, compress=False):
    from Crypto.Cipher import AES
    import scrypt

    addresshash = hashlib.sha256(hashlib.sha256(addr).digest()).digest()[0:4]
    compress = '\xe0' if compress else '\xc0'
    key = scrypt.hash(passphrase, addresshash, 16384, 8, 8)
    aes = AES.new(key[32:64])
    encryptedhalf1 = aes.encrypt(binascii.unhexlify('%0.32x' % (long(privkey[0:32], 16) ^ long(binascii.hexlify(key[0:16]), 16))))
    encryptedhalf2 = aes.encrypt(binascii.unhexlify('%0.32x' % (long(privkey[32:64], 16) ^ long(binascii.hexlify(key[16:32]), 16))))
    encrypted_privkey = ('\x01\x42' + compress + addresshash + encryptedhalf1 + encryptedhalf2)
    encrypted_privkey += hashlib.sha256(hashlib.sha256(encrypted_privkey).digest()).digest()[:4]
    return b58encode(long(binascii.hexlify(encrypted_privkey), 16))
                
def bip38_decrypt(encrypted_privkey, passphrase):
    from Crypto.Cipher import AES
    import scrypt
    
    hexkey = "0"+b58hex(encrypted_privkey)
    if hexkey[0:2] != '0142':
        sys.exit('BIP38 Third-party key (EC Multiply flag) not supported.')
    data = binascii.unhexlify(hexkey)
    compress = '' if data[2] == '\xc0' else '01'
    key = scrypt.hash(passphrase, data[3:7], 16384, 8, 8)
    aes = AES.new(key[32:64])
    priv = aes.decrypt(data[7:23]) + aes.decrypt(data[23:39])
    priv = '%064x' % (long(binascii.hexlify(priv), 16) ^ long(binascii.hexlify(key[0:32]), 16))
    pub = priv2pub(priv, data[2] != '\xc0')
    if hashlib.sha256(hashlib.sha256(mkaddr(pub)).digest()).digest()[0:4] != data[3:7]:
        sys.exit('BIP38 verification failed! Password is likely incorrect.')
    chksum = binascii.hexlify(hashlib.sha256(hashlib.sha256(binascii.unhexlify('80'+priv+compress)).digest()).digest()[:4])
    return b58encode(long('80'+priv+compress+chksum, 16))
    
import ecdsa

# secp256k1, http://www.oid-info.com/get/1.3.132.0.10
_p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2FL
_r = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141L
_b = 0x0000000000000000000000000000000000000000000000000000000000000007L
_a = 0x0000000000000000000000000000000000000000000000000000000000000000L
_Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798L
_Gy = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8L
curve_secp256k1 = ecdsa.ellipticcurve.CurveFp( _p, _a, _b )
generator_secp256k1 = ecdsa.ellipticcurve.Point( curve_secp256k1, _Gx, _Gy, _r )
oid_secp256k1 = (1,3,132,0,10)
SECP256k1 = ecdsa.curves.Curve("SECP256k1", curve_secp256k1, generator_secp256k1, oid_secp256k1 ) 

compress = sys.argv[1] == '-c'
arg1 = 2 if compress else 1

for line in sys.stdin:
    line = line.replace(' ', '').replace('\n', '')
    if len(sys.argv) > arg1+1 and line[0] == '6' and len(line) < 64:
        line = bip38_decrypt(line, sys.argv[arg1+1])
    line = b58hex(line)[2:] if not all(c in string.hexdigits for c in line) and len(line) < 64 else line
    compress = True if len(line) > 72 else compress
    line = line[:64]

    chksum = binascii.hexlify(hashlib.sha256(hashlib.sha256(binascii.unhexlify('80'+line+('01' if compress else ''))).digest()).digest()[:4])
    privkey = long('80'+line+('01' if compress else '')+chksum, 16)
    pubkey = priv2pub(line, compress)
    pkh = mkpkh(pubkey)
    addr = mkaddr(pubkey)
    
    out = sys.argv[arg1].replace('%h', line).replace('%w', b58encode(privkey))
    out = out.replace('%p', binascii.hexlify(pubkey).upper()).replace('%a', addr).replace('%k', pkh.encode('hex'))
    if len(sys.argv) > arg1+1:
        bip38key = bip38_encrypt(line, addr, sys.argv[arg1+1], compress)
        out = out.replace('%e', bip38key)   
    print out.decode('string-escape')
    





    

